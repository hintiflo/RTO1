<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Apus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Apus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 17 14:15:57 2020
<BR><P>
<H3>Maximum Stack Usage =        452 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TaskMandelbrot &rArr; MandelBrot &rArr; Tft_DrawPixel &rArr; Tft_SetWindow &rArr; __aeabi_assert
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[24]">CEC_CAN_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[2a]">FillTaskA</a> from apos_1.o(.text) referenced from main.o(i.main)
 <LI><a href="#[2b]">FillTaskB</a> from apos_1.o(.text) referenced from main.o(i.main)
 <LI><a href="#[2c]">FillTaskC</a> from apos_1.o(.text) referenced from main.o(i.main)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[7]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[23]">USART3_4_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f072.o(.text) referenced from startup_stm32f072.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f072.o(.text)
 <LI><a href="#[29]">_snputc</a> from printf6.o(i._snputc) referenced from printf6.o(i.__0snprintf$6)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[90]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[91]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2f]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[92]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[93]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2a]"></a>FillTaskA</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, apos_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2b]"></a>FillTaskB</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, apos_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2c]"></a>FillTaskC</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, apos_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_Scheduler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_InitSysTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetValue
</UL>

<P><STRONG><a name="[68]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[45]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_TASK_Create
</UL>

<P><STRONG><a name="[46]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_TASK_Create
</UL>

<P><STRONG><a name="[33]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_TASK_Create
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[96]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[97]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[38]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[4a]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetValue
</UL>

<P><STRONG><a name="[48]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetValue
</UL>

<P><STRONG><a name="[4d]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[49]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetValue
</UL>

<P><STRONG><a name="[42]"></a>APOS_Scheduler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, apos.o(i.APOS_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APOS_Scheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskA
</UL>

<P><STRONG><a name="[44]"></a>APOS_TASK_Create</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, apos.o(i.APOS_TASK_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = APOS_TASK_Create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>Adc_GetValue</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, adc.o(i.Adc_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_GetValue &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPoti
</UL>

<P><STRONG><a name="[4b]"></a>Adc_Init</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adc_Init &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>Adc_SetChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.Adc_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[50]"></a>Debug_TaskOff_A</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, apos.o(i.Debug_TaskOff_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Debug_TaskOff_A
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskA
</UL>

<P><STRONG><a name="[52]"></a>Debug_TaskOn_A</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, apos.o(i.Debug_TaskOn_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Debug_TaskOn_A
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskA
</UL>

<P><STRONG><a name="[56]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setup
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_InitGPIOs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[58]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
</UL>

<P><STRONG><a name="[55]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setup
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_InitGPIOs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[51]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TaskOn_A
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TaskOff_A
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWatchLED
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTickLED
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPotiLED
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMandelbrotLED
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedLED
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setKeyLED
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCounterLED
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resWatchLED
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resSysTickLED
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resPotiLED
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resMandelbrotLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resLedLED
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resKeyLED
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resCounterLED
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Switch
</UL>

<P><STRONG><a name="[53]"></a>GPIO_setup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.GPIO_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_setup &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Key_GetState</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, key.o(i.Key_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[59]"></a>Key_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, key.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Led_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>Led_TurnOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.Led_TurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led_TurnOff &rArr; Led_Switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
</UL>

<P><STRONG><a name="[5e]"></a>Led_TurnOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.Led_TurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led_TurnOn &rArr; Led_Switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
</UL>

<P><STRONG><a name="[54]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setup
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_InitGPIOs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[4c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>Systick_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Systick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_Scheduler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCounter
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[63]"></a>TaskA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apos.o(i.TaskA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TaskA &rArr; APOS_Scheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TaskOn_A
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TaskOff_A
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_Scheduler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTaskA
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>TaskCounter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, taskcounter.o(i.TaskCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TaskCounter &rArr; Tft_DrawString &rArr; Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>TaskKey</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, taskkey.o(i.TaskKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = TaskKey &rArr; Tft_DrawString &rArr; Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetForegroundColourRgb16
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>TaskLed</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, taskled.o(i.TaskLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TaskLed &rArr; Led_TurnOn &rArr; Led_Switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TurnOn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TurnOff
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>TaskMandelbrot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, taskmandelbrot.o(i.TaskMandelbrot))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = TaskMandelbrot &rArr; MandelBrot &rArr; Tft_DrawPixel &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>TaskPoti</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, taskpoti.o(i.TaskPoti))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = TaskPoti &rArr; Tft_DrawString &rArr; Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetValue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>TaskWatch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, taskwatch.o(i.TaskWatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = TaskWatch &rArr; Tft_DrawString &rArr; Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Tft_ClearScreen</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tftdisplay.o(i.Tft_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Tft_ClearScreen &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixels
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Tft_DrawChar</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, tftdisplay.o(i.Tft_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawString
</UL>

<P><STRONG><a name="[61]"></a>Tft_DrawPixel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tftdisplay.o(i.Tft_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Tft_DrawPixel &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MandelBrot
</UL>

<P><STRONG><a name="[66]"></a>Tft_DrawString</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tftdisplay.o(i.Tft_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Tft_DrawString &rArr; Tft_DrawChar &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPoti
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMandelbrot
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCounter
</UL>

<P><STRONG><a name="[74]"></a>Tft_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tftdisplay.o(i.Tft_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Tft_Init &rArr; Tft_InitGPIOs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_InitGPIOs
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>Tft_SetFont</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tftdisplay.o(i.Tft_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>Tft_SetForegroundColourRgb16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftdisplay.o(i.Tft_SetForegroundColourRgb16))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
</UL>

<P><STRONG><a name="[79]"></a>Tick_InitSysTick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, systick.o(i.Tick_InitSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Tick_InitSysTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>__0snprintf$6</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf6.o(i.__0snprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b]"></a>__1snprintf$6</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf6.o(i.__0snprintf$6), UNUSED)

<P><STRONG><a name="[65]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf6.o(i.__0snprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPoti
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCounter
</UL>

<P><STRONG><a name="[3f]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Switch
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_assert</STRONG> (Thumb, 60 bytes, Stack size 156 bytes, main.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = main &rArr; TaskMandelbrot &rArr; MandelBrot &rArr; Tft_DrawPixel &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskWatch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskPoti
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMandelbrot
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskKey
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCounter
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskA
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTaskC
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillTaskB
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APOS_TASK_Create
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_setup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWatchLED
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSysTickLED
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPotiLED
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMandelbrotLED
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedLED
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setKeyLED
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCounterLED
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resWatchLED
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resSysTickLED
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resPotiLED
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resMandelbrotLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resLedLED
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resKeyLED
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resCounterLED
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_InitSysTick
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetFont
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_ClearScreen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[34]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>Led_Switch</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, led.o(i.Led_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_Switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TurnOn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_TurnOff
</UL>

<P><STRONG><a name="[75]"></a>Tft_InitGPIOs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tftdisplay.o(i.Tft_InitGPIOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Tft_InitGPIOs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_Init
</UL>

<P><STRONG><a name="[6f]"></a>Tft_SetWindow</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, tftdisplay.o(i.Tft_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawPixel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawChar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_ClearScreen
</UL>

<P><STRONG><a name="[78]"></a>Tft_ToBSRRValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tftdisplay.o(i.Tft_ToBSRRValue))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixels
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteData
</UL>

<P><STRONG><a name="[72]"></a>Tft_WriteCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tftdisplay.o(i.Tft_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tft_WriteCmd &rArr; Tft_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawPixel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawChar
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixels
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>

<P><STRONG><a name="[76]"></a>Tft_WriteData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tftdisplay.o(i.Tft_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tft_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_ToBSRRValue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WritePixel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_SetWindow
</UL>

<P><STRONG><a name="[73]"></a>Tft_WritePixel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tftdisplay.o(i.Tft_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tft_WritePixel &rArr; Tft_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawPixel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawChar
</UL>

<P><STRONG><a name="[70]"></a>Tft_WritePixels</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tftdisplay.o(i.Tft_WritePixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Tft_WritePixels &rArr; Tft_WriteCmd &rArr; Tft_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_WriteCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_ToBSRRValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_ClearScreen
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_InitSysTick
</UL>

<P><STRONG><a name="[82]"></a>resCounterLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.resCounterLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resCounterLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>resKeyLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.resKeyLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resKeyLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>resLedLED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.resLedLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resLedLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>resMandelbrotLED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.resMandelbrotLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resMandelbrotLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>resPotiLED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.resPotiLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resPotiLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>resSysTickLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.resSysTickLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resSysTickLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>resWatchLED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.resWatchLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resWatchLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>setCounterLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setCounterLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setCounterLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>setKeyLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setKeyLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setKeyLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>setLedLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setLedLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setLedLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>setMandelbrotLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setMandelbrotLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMandelbrotLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>setPotiLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setPotiLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setPotiLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>setSysTickLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setSysTickLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setSysTickLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>setWatchLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.setWatchLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setWatchLED
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>SetSysClock</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5f]"></a>MandelBrot</STRONG> (Thumb, 470 bytes, Stack size 152 bytes, taskmandelbrot.o(i.MandelBrot))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = MandelBrot &rArr; Tft_DrawPixel &rArr; Tft_SetWindow &rArr; __aeabi_assert
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_GetTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tft_DrawPixel
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMandelbrot
</UL>

<P><STRONG><a name="[7c]"></a>_printf_core</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$6
</UL>

<P><STRONG><a name="[7e]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf6.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0snprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
